// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// V3DisruptionRoute v3 disruption route
// swagger:model V3.DisruptionRoute
type V3DisruptionRoute struct {

	// Direction of travel relevant to a disruption (if applicable)
	Direction *V3DisruptionDirection `json:"direction,omitempty"`

	// GTFS Identifer of the route
	RouteGtfsID string `json:"route_gtfs_id,omitempty"`

	// Route identifier
	RouteID int32 `json:"route_id,omitempty"`

	// Name of route
	RouteName string `json:"route_name,omitempty"`

	// Route number presented to public (i.e. not route_id)
	RouteNumber string `json:"route_number,omitempty"`

	// Transport mode identifier
	RouteType int32 `json:"route_type,omitempty"`
}

// Validate validates this v3 disruption route
func (m *V3DisruptionRoute) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDirection(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V3DisruptionRoute) validateDirection(formats strfmt.Registry) error {

	if swag.IsZero(m.Direction) { // not required
		return nil
	}

	if m.Direction != nil {
		if err := m.Direction.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("direction")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *V3DisruptionRoute) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *V3DisruptionRoute) UnmarshalBinary(b []byte) error {
	var res V3DisruptionRoute
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
