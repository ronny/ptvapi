// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// V3ResultRoute v3 result route
// swagger:model V3.ResultRoute
type V3ResultRoute struct {

	// GTFS Identifer of the route
	RouteGtfsID string `json:"route_gtfs_id,omitempty"`

	// Route identifier
	RouteID int32 `json:"route_id,omitempty"`

	// Name of route
	RouteName string `json:"route_name,omitempty"`

	// Route number presented to public (nb. not route_id)
	RouteNumber string `json:"route_number,omitempty"`

	// Service status for the route (indicates disruptions)
	RouteServiceStatus *V3RouteServiceStatus `json:"route_service_status,omitempty"`

	// Transport mode identifier
	RouteType int32 `json:"route_type,omitempty"`
}

// Validate validates this v3 result route
func (m *V3ResultRoute) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateRouteServiceStatus(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V3ResultRoute) validateRouteServiceStatus(formats strfmt.Registry) error {

	if swag.IsZero(m.RouteServiceStatus) { // not required
		return nil
	}

	if m.RouteServiceStatus != nil {
		if err := m.RouteServiceStatus.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("route_service_status")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *V3ResultRoute) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *V3ResultRoute) UnmarshalBinary(b []byte) error {
	var res V3ResultRoute
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
