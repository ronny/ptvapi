// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// V3Status v3 status
// swagger:model V3.Status
type V3Status struct {

	// API system health status (0=offline, 1=online)
	// Enum: [0 1]
	Health int32 `json:"health,omitempty"`

	// API Version number
	Version string `json:"version,omitempty"`
}

// Validate validates this v3 status
func (m *V3Status) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateHealth(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var v3StatusTypeHealthPropEnum []interface{}

func init() {
	var res []int32
	if err := json.Unmarshal([]byte(`[0,1]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		v3StatusTypeHealthPropEnum = append(v3StatusTypeHealthPropEnum, v)
	}
}

// prop value enum
func (m *V3Status) validateHealthEnum(path, location string, value int32) error {
	if err := validate.Enum(path, location, value, v3StatusTypeHealthPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *V3Status) validateHealth(formats strfmt.Registry) error {

	if swag.IsZero(m.Health) { // not required
		return nil
	}

	// value enum
	if err := m.validateHealthEnum("health", "body", m.Health); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *V3Status) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *V3Status) UnmarshalBinary(b []byte) error {
	var res V3Status
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
