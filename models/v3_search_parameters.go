// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// V3SearchParameters v3 search parameters
// swagger:model V3.SearchParameters
type V3SearchParameters struct {

	// Placeholder for future development; currently unavailable
	IncludeAddresses bool `json:"include_addresses,omitempty"`

	// Indicates if outlets will be returned in response (default = true)
	IncludeOutlets bool `json:"include_outlets,omitempty"`

	// Filter by geographic coordinate of latitude
	Latitude float32 `json:"latitude,omitempty"`

	// Filter by geographic coordinate of longitude
	Longitude float32 `json:"longitude,omitempty"`

	// Indicates whether to find routes by suburbs in the search term (default = true)
	MatchRouteBySuburb bool `json:"match_route_by_suburb,omitempty"`

	// Indicates whether to search for stops according to a metlink stop ID (default = false)
	MatchStopByGtfsStopID bool `json:"match_stop_by_gtfs_stop_id,omitempty"`

	// Indicates whether to find stops by suburbs in the search term (default = true)
	MatchStopBySuburb bool `json:"match_stop_by_suburb,omitempty"`

	// Filter by maximum distance (in metres) from location specified via latitude and longitude parameters
	MaxDistance float32 `json:"max_distance,omitempty"`

	// Filter by route_type; values returned via RouteTypes API (note: stops and routes are ordered by route_types specified)
	RouteTypes []int32 `json:"route_types"`
}

// Validate validates this v3 search parameters
func (m *V3SearchParameters) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateRouteTypes(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var v3SearchParametersRouteTypesItemsEnum []interface{}

func init() {
	var res []int32
	if err := json.Unmarshal([]byte(`[0,1,2,3,4]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		v3SearchParametersRouteTypesItemsEnum = append(v3SearchParametersRouteTypesItemsEnum, v)
	}
}

func (m *V3SearchParameters) validateRouteTypesItemsEnum(path, location string, value int32) error {
	if err := validate.Enum(path, location, value, v3SearchParametersRouteTypesItemsEnum); err != nil {
		return err
	}
	return nil
}

func (m *V3SearchParameters) validateRouteTypes(formats strfmt.Registry) error {

	if swag.IsZero(m.RouteTypes) { // not required
		return nil
	}

	for i := 0; i < len(m.RouteTypes); i++ {

		// value enum
		if err := m.validateRouteTypesItemsEnum("route_types"+"."+strconv.Itoa(i), "body", m.RouteTypes[i]); err != nil {
			return err
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *V3SearchParameters) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *V3SearchParameters) UnmarshalBinary(b []byte) error {
	var res V3SearchParameters
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
