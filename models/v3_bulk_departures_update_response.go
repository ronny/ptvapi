// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// V3BulkDeparturesUpdateResponse v3 bulk departures update response
// swagger:model V3.BulkDeparturesUpdateResponse
type V3BulkDeparturesUpdateResponse struct {

	// Timetabled and real-time service departures
	Departures []*V3Departure `json:"departures"`

	// The route direction that these departures are for. Will be one of the requested route directions
	RequestedRouteDirection *V3BulkDeparturesRouteDirectionResponse `json:"requested_route_direction,omitempty"`

	// The route direction found matching the requested_route_direction
	RouteDirection *V3BulkDeparturesRouteDirectionResponse `json:"route_direction,omitempty"`

	// The status of the route direction (changed | unchanged).
	//             If changed, requests should change the requested_route_direction for the route_direction supplied.
	// Enum: [0 1]
	RouteDirectionStatus int32 `json:"route_direction_status,omitempty"`

	// Transport mode identifier
	RouteType int32 `json:"route_type,omitempty"`

	// Stop identifier
	StopID int32 `json:"stop_id,omitempty"`
}

// Validate validates this v3 bulk departures update response
func (m *V3BulkDeparturesUpdateResponse) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDepartures(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRequestedRouteDirection(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRouteDirection(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRouteDirectionStatus(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V3BulkDeparturesUpdateResponse) validateDepartures(formats strfmt.Registry) error {

	if swag.IsZero(m.Departures) { // not required
		return nil
	}

	for i := 0; i < len(m.Departures); i++ {
		if swag.IsZero(m.Departures[i]) { // not required
			continue
		}

		if m.Departures[i] != nil {
			if err := m.Departures[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("departures" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *V3BulkDeparturesUpdateResponse) validateRequestedRouteDirection(formats strfmt.Registry) error {

	if swag.IsZero(m.RequestedRouteDirection) { // not required
		return nil
	}

	if m.RequestedRouteDirection != nil {
		if err := m.RequestedRouteDirection.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("requested_route_direction")
			}
			return err
		}
	}

	return nil
}

func (m *V3BulkDeparturesUpdateResponse) validateRouteDirection(formats strfmt.Registry) error {

	if swag.IsZero(m.RouteDirection) { // not required
		return nil
	}

	if m.RouteDirection != nil {
		if err := m.RouteDirection.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("route_direction")
			}
			return err
		}
	}

	return nil
}

var v3BulkDeparturesUpdateResponseTypeRouteDirectionStatusPropEnum []interface{}

func init() {
	var res []int32
	if err := json.Unmarshal([]byte(`[0,1]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		v3BulkDeparturesUpdateResponseTypeRouteDirectionStatusPropEnum = append(v3BulkDeparturesUpdateResponseTypeRouteDirectionStatusPropEnum, v)
	}
}

// prop value enum
func (m *V3BulkDeparturesUpdateResponse) validateRouteDirectionStatusEnum(path, location string, value int32) error {
	if err := validate.Enum(path, location, value, v3BulkDeparturesUpdateResponseTypeRouteDirectionStatusPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *V3BulkDeparturesUpdateResponse) validateRouteDirectionStatus(formats strfmt.Registry) error {

	if swag.IsZero(m.RouteDirectionStatus) { // not required
		return nil
	}

	// value enum
	if err := m.validateRouteDirectionStatusEnum("route_direction_status", "body", m.RouteDirectionStatus); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *V3BulkDeparturesUpdateResponse) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *V3BulkDeparturesUpdateResponse) UnmarshalBinary(b []byte) error {
	var res V3BulkDeparturesUpdateResponse
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
