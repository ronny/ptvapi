// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// V3RouteDeparturesSpecificParameters v3 route departures specific parameters
// swagger:model V3.RouteDeparturesSpecificParameters
type V3RouteDeparturesSpecificParameters struct {

	// Filter by the date and time of the request (ISO 8601 UTC format) (default = current date and time)
	// Format: date-time
	DateUtc strfmt.DateTime `json:"date_utc,omitempty"`

	// List objects to be returned in full (i.e. expanded) - options include: all, stop, route, run, direction, disruption
	Expand []string `json:"expand"`

	// Indicates if cancelled services (if they exist) are returned (default = false) - metropolitan train only
	IncludeCancelled bool `json:"include_cancelled,omitempty"`

	// Indicates if filtering runs (and their departures) to those that arrive at destination before date_utc (default = false). Requires max_results &gt; 0.
	LookBackwards bool `json:"look_backwards,omitempty"`

	// Maximum number of results returned
	MaxResults int32 `json:"max_results,omitempty"`

	// When set to true, all timetable information returned by Chronos will be sourced from the Parser timetables,
	//             while when set to false (default state), the real-time departure information and operational time from
	//             Metro CIS will continue to be returned where available.
	TrainScheduledTimetables bool `json:"train_scheduled_timetables,omitempty"`
}

// Validate validates this v3 route departures specific parameters
func (m *V3RouteDeparturesSpecificParameters) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDateUtc(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateExpand(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V3RouteDeparturesSpecificParameters) validateDateUtc(formats strfmt.Registry) error {

	if swag.IsZero(m.DateUtc) { // not required
		return nil
	}

	if err := validate.FormatOf("date_utc", "body", "date-time", m.DateUtc.String(), formats); err != nil {
		return err
	}

	return nil
}

var v3RouteDeparturesSpecificParametersExpandItemsEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["All","Stop","Route","Run","Direction","Disruption"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		v3RouteDeparturesSpecificParametersExpandItemsEnum = append(v3RouteDeparturesSpecificParametersExpandItemsEnum, v)
	}
}

func (m *V3RouteDeparturesSpecificParameters) validateExpandItemsEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, v3RouteDeparturesSpecificParametersExpandItemsEnum); err != nil {
		return err
	}
	return nil
}

func (m *V3RouteDeparturesSpecificParameters) validateExpand(formats strfmt.Registry) error {

	if swag.IsZero(m.Expand) { // not required
		return nil
	}

	for i := 0; i < len(m.Expand); i++ {

		// value enum
		if err := m.validateExpandItemsEnum("expand"+"."+strconv.Itoa(i), "body", m.Expand[i]); err != nil {
			return err
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *V3RouteDeparturesSpecificParameters) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *V3RouteDeparturesSpecificParameters) UnmarshalBinary(b []byte) error {
	var res V3RouteDeparturesSpecificParameters
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
