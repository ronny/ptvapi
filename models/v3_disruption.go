// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// V3Disruption v3 disruption
// swagger:model V3.Disruption
type V3Disruption struct {

	// colour
	Colour string `json:"colour,omitempty"`

	// Description of the disruption
	Description string `json:"description,omitempty"`

	// display on board
	DisplayOnBoard bool `json:"display_on_board,omitempty"`

	// display status
	DisplayStatus bool `json:"display_status,omitempty"`

	// Disruption information identifier
	DisruptionID int64 `json:"disruption_id,omitempty"`

	// Status of the disruption (e.g. "Planned", "Current")
	DisruptionStatus string `json:"disruption_status,omitempty"`

	// Type of disruption
	DisruptionType string `json:"disruption_type,omitempty"`

	// Date and time at which disruption begins, in ISO 8601 UTC format
	// Format: date-time
	FromDate strfmt.DateTime `json:"from_date,omitempty"`

	// Date and time disruption information was last updated by PTV, in ISO 8601 UTC format
	// Format: date-time
	LastUpdated strfmt.DateTime `json:"last_updated,omitempty"`

	// Date and time disruption information is published on PTV website, in ISO 8601 UTC format
	// Format: date-time
	PublishedOn strfmt.DateTime `json:"published_on,omitempty"`

	// Route relevant to a disruption (if applicable)
	Routes []*V3DisruptionRoute `json:"routes"`

	// Stop relevant to a disruption (if applicable)
	Stops []*V3DisruptionStop `json:"stops"`

	// Headline title summarising disruption information
	Title string `json:"title,omitempty"`

	// Date and time at which disruption ends, in ISO 8601 UTC format (returns null if unknown)
	// Format: date-time
	ToDate strfmt.DateTime `json:"to_date,omitempty"`

	// URL of relevant article on PTV website
	URL string `json:"url,omitempty"`
}

// Validate validates this v3 disruption
func (m *V3Disruption) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateFromDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLastUpdated(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePublishedOn(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRoutes(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStops(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateToDate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V3Disruption) validateFromDate(formats strfmt.Registry) error {

	if swag.IsZero(m.FromDate) { // not required
		return nil
	}

	if err := validate.FormatOf("from_date", "body", "date-time", m.FromDate.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *V3Disruption) validateLastUpdated(formats strfmt.Registry) error {

	if swag.IsZero(m.LastUpdated) { // not required
		return nil
	}

	if err := validate.FormatOf("last_updated", "body", "date-time", m.LastUpdated.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *V3Disruption) validatePublishedOn(formats strfmt.Registry) error {

	if swag.IsZero(m.PublishedOn) { // not required
		return nil
	}

	if err := validate.FormatOf("published_on", "body", "date-time", m.PublishedOn.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *V3Disruption) validateRoutes(formats strfmt.Registry) error {

	if swag.IsZero(m.Routes) { // not required
		return nil
	}

	for i := 0; i < len(m.Routes); i++ {
		if swag.IsZero(m.Routes[i]) { // not required
			continue
		}

		if m.Routes[i] != nil {
			if err := m.Routes[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("routes" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *V3Disruption) validateStops(formats strfmt.Registry) error {

	if swag.IsZero(m.Stops) { // not required
		return nil
	}

	for i := 0; i < len(m.Stops); i++ {
		if swag.IsZero(m.Stops[i]) { // not required
			continue
		}

		if m.Stops[i] != nil {
			if err := m.Stops[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("stops" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *V3Disruption) validateToDate(formats strfmt.Registry) error {

	if swag.IsZero(m.ToDate) { // not required
		return nil
	}

	if err := validate.FormatOf("to_date", "body", "date-time", m.ToDate.String(), formats); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *V3Disruption) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *V3Disruption) UnmarshalBinary(b []byte) error {
	var res V3Disruption
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
