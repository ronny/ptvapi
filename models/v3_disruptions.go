// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// V3Disruptions v3 disruptions
// swagger:model V3.Disruptions
type V3Disruptions struct {

	// Subset of disruption information applicable to ferry
	Ferry []*V3Disruption `json:"ferry"`

	// Subset of disruption information applicable to multiple route_types
	General []*V3Disruption `json:"general"`

	// Subset of disruption information applicable to interstate train
	InterstateTrain []*V3Disruption `json:"interstate_train"`

	// Subset of disruption information applicable to metropolitan bus
	MetroBus []*V3Disruption `json:"metro_bus"`

	// Subset of disruption information applicable to metropolitan train
	MetroTrain []*V3Disruption `json:"metro_train"`

	// Subset of disruption information applicable to metropolitan tram
	MetroTram []*V3Disruption `json:"metro_tram"`

	// Subset of disruption information applicable to night bus
	NightBus []*V3Disruption `json:"night_bus"`

	// Subset of disruption information applicable to regional bus
	RegionalBus []*V3Disruption `json:"regional_bus"`

	// Subset of disruption information applicable to V/Line coach
	RegionalCoach []*V3Disruption `json:"regional_coach"`

	// Subset of disruption information applicable to V/Line train
	RegionalTrain []*V3Disruption `json:"regional_train"`

	// Subset of disruption information applicable to school bus
	SchoolBus []*V3Disruption `json:"school_bus"`

	// Subset of disruption information applicable to skybus
	Skybus []*V3Disruption `json:"skybus"`

	// Subset of disruption information applicable to taxi
	Taxi []*V3Disruption `json:"taxi"`

	// Subset of disruption information applicable to telebus services
	Telebus []*V3Disruption `json:"telebus"`
}

// Validate validates this v3 disruptions
func (m *V3Disruptions) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateFerry(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateGeneral(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateInterstateTrain(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMetroBus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMetroTrain(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMetroTram(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNightBus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRegionalBus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRegionalCoach(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRegionalTrain(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSchoolBus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSkybus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTaxi(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTelebus(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V3Disruptions) validateFerry(formats strfmt.Registry) error {

	if swag.IsZero(m.Ferry) { // not required
		return nil
	}

	for i := 0; i < len(m.Ferry); i++ {
		if swag.IsZero(m.Ferry[i]) { // not required
			continue
		}

		if m.Ferry[i] != nil {
			if err := m.Ferry[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("ferry" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *V3Disruptions) validateGeneral(formats strfmt.Registry) error {

	if swag.IsZero(m.General) { // not required
		return nil
	}

	for i := 0; i < len(m.General); i++ {
		if swag.IsZero(m.General[i]) { // not required
			continue
		}

		if m.General[i] != nil {
			if err := m.General[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("general" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *V3Disruptions) validateInterstateTrain(formats strfmt.Registry) error {

	if swag.IsZero(m.InterstateTrain) { // not required
		return nil
	}

	for i := 0; i < len(m.InterstateTrain); i++ {
		if swag.IsZero(m.InterstateTrain[i]) { // not required
			continue
		}

		if m.InterstateTrain[i] != nil {
			if err := m.InterstateTrain[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("interstate_train" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *V3Disruptions) validateMetroBus(formats strfmt.Registry) error {

	if swag.IsZero(m.MetroBus) { // not required
		return nil
	}

	for i := 0; i < len(m.MetroBus); i++ {
		if swag.IsZero(m.MetroBus[i]) { // not required
			continue
		}

		if m.MetroBus[i] != nil {
			if err := m.MetroBus[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("metro_bus" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *V3Disruptions) validateMetroTrain(formats strfmt.Registry) error {

	if swag.IsZero(m.MetroTrain) { // not required
		return nil
	}

	for i := 0; i < len(m.MetroTrain); i++ {
		if swag.IsZero(m.MetroTrain[i]) { // not required
			continue
		}

		if m.MetroTrain[i] != nil {
			if err := m.MetroTrain[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("metro_train" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *V3Disruptions) validateMetroTram(formats strfmt.Registry) error {

	if swag.IsZero(m.MetroTram) { // not required
		return nil
	}

	for i := 0; i < len(m.MetroTram); i++ {
		if swag.IsZero(m.MetroTram[i]) { // not required
			continue
		}

		if m.MetroTram[i] != nil {
			if err := m.MetroTram[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("metro_tram" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *V3Disruptions) validateNightBus(formats strfmt.Registry) error {

	if swag.IsZero(m.NightBus) { // not required
		return nil
	}

	for i := 0; i < len(m.NightBus); i++ {
		if swag.IsZero(m.NightBus[i]) { // not required
			continue
		}

		if m.NightBus[i] != nil {
			if err := m.NightBus[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("night_bus" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *V3Disruptions) validateRegionalBus(formats strfmt.Registry) error {

	if swag.IsZero(m.RegionalBus) { // not required
		return nil
	}

	for i := 0; i < len(m.RegionalBus); i++ {
		if swag.IsZero(m.RegionalBus[i]) { // not required
			continue
		}

		if m.RegionalBus[i] != nil {
			if err := m.RegionalBus[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("regional_bus" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *V3Disruptions) validateRegionalCoach(formats strfmt.Registry) error {

	if swag.IsZero(m.RegionalCoach) { // not required
		return nil
	}

	for i := 0; i < len(m.RegionalCoach); i++ {
		if swag.IsZero(m.RegionalCoach[i]) { // not required
			continue
		}

		if m.RegionalCoach[i] != nil {
			if err := m.RegionalCoach[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("regional_coach" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *V3Disruptions) validateRegionalTrain(formats strfmt.Registry) error {

	if swag.IsZero(m.RegionalTrain) { // not required
		return nil
	}

	for i := 0; i < len(m.RegionalTrain); i++ {
		if swag.IsZero(m.RegionalTrain[i]) { // not required
			continue
		}

		if m.RegionalTrain[i] != nil {
			if err := m.RegionalTrain[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("regional_train" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *V3Disruptions) validateSchoolBus(formats strfmt.Registry) error {

	if swag.IsZero(m.SchoolBus) { // not required
		return nil
	}

	for i := 0; i < len(m.SchoolBus); i++ {
		if swag.IsZero(m.SchoolBus[i]) { // not required
			continue
		}

		if m.SchoolBus[i] != nil {
			if err := m.SchoolBus[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("school_bus" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *V3Disruptions) validateSkybus(formats strfmt.Registry) error {

	if swag.IsZero(m.Skybus) { // not required
		return nil
	}

	for i := 0; i < len(m.Skybus); i++ {
		if swag.IsZero(m.Skybus[i]) { // not required
			continue
		}

		if m.Skybus[i] != nil {
			if err := m.Skybus[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("skybus" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *V3Disruptions) validateTaxi(formats strfmt.Registry) error {

	if swag.IsZero(m.Taxi) { // not required
		return nil
	}

	for i := 0; i < len(m.Taxi); i++ {
		if swag.IsZero(m.Taxi[i]) { // not required
			continue
		}

		if m.Taxi[i] != nil {
			if err := m.Taxi[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("taxi" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *V3Disruptions) validateTelebus(formats strfmt.Registry) error {

	if swag.IsZero(m.Telebus) { // not required
		return nil
	}

	for i := 0; i < len(m.Telebus); i++ {
		if swag.IsZero(m.Telebus[i]) { // not required
			continue
		}

		if m.Telebus[i] != nil {
			if err := m.Telebus[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("telebus" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *V3Disruptions) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *V3Disruptions) UnmarshalBinary(b []byte) error {
	var res V3Disruptions
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
