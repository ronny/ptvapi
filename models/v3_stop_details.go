// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// V3StopDetails v3 stop details
// swagger:model V3.StopDetails
type V3StopDetails struct {

	// Disruption information identifier(s)
	DisruptionIds []int64 `json:"disruption_ids"`

	// Transport mode identifier
	RouteType int32 `json:"route_type,omitempty"`

	// The definition applicable to the station_type; returns null for V/Line train
	StationDescription string `json:"station_description,omitempty"`

	// Type of metropolitan train station (i.e. "Premium", "Host" or "Unstaffed" station); returns null for V/Line train
	StationType string `json:"station_type,omitempty"`

	// Facilities relating to the accessibility of the stop
	StopAccessibility *V3StopAccessibility `json:"stop_accessibility,omitempty"`

	// Amenity and facility details at the stop
	StopAmenities *V3StopAmenityDetails `json:"stop_amenities,omitempty"`

	// Stop identifier
	StopID int32 `json:"stop_id,omitempty"`

	// Location details of the stop
	StopLocation *V3StopLocation `json:"stop_location,omitempty"`

	// Name of stop
	StopName string `json:"stop_name,omitempty"`

	// Staffing details for the stop
	StopStaffing *V3StopStaffing `json:"stop_staffing,omitempty"`
}

// Validate validates this v3 stop details
func (m *V3StopDetails) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateStopAccessibility(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStopAmenities(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStopLocation(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStopStaffing(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V3StopDetails) validateStopAccessibility(formats strfmt.Registry) error {

	if swag.IsZero(m.StopAccessibility) { // not required
		return nil
	}

	if m.StopAccessibility != nil {
		if err := m.StopAccessibility.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("stop_accessibility")
			}
			return err
		}
	}

	return nil
}

func (m *V3StopDetails) validateStopAmenities(formats strfmt.Registry) error {

	if swag.IsZero(m.StopAmenities) { // not required
		return nil
	}

	if m.StopAmenities != nil {
		if err := m.StopAmenities.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("stop_amenities")
			}
			return err
		}
	}

	return nil
}

func (m *V3StopDetails) validateStopLocation(formats strfmt.Registry) error {

	if swag.IsZero(m.StopLocation) { // not required
		return nil
	}

	if m.StopLocation != nil {
		if err := m.StopLocation.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("stop_location")
			}
			return err
		}
	}

	return nil
}

func (m *V3StopDetails) validateStopStaffing(formats strfmt.Registry) error {

	if swag.IsZero(m.StopStaffing) { // not required
		return nil
	}

	if m.StopStaffing != nil {
		if err := m.StopStaffing.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("stop_staffing")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *V3StopDetails) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *V3StopDetails) UnmarshalBinary(b []byte) error {
	var res V3StopDetails
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
