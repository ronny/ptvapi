// Code generated by go-swagger; DO NOT EDIT.

package directions

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/ronny/ptvapi/v3/models"
)

// DirectionsForRouteReader is a Reader for the DirectionsForRoute structure.
type DirectionsForRouteReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *DirectionsForRouteReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewDirectionsForRouteOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewDirectionsForRouteBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewDirectionsForRouteForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewDirectionsForRouteOK creates a DirectionsForRouteOK with default headers values
func NewDirectionsForRouteOK() *DirectionsForRouteOK {
	return &DirectionsForRouteOK{}
}

/*DirectionsForRouteOK handles this case with default header values.

The directions that a specified route travels in.
*/
type DirectionsForRouteOK struct {
	Payload *models.V3DirectionsResponse
}

func (o *DirectionsForRouteOK) Error() string {
	return fmt.Sprintf("[GET /v3/directions/route/{route_id}][%d] directionsForRouteOK  %+v", 200, o.Payload)
}

func (o *DirectionsForRouteOK) GetPayload() *models.V3DirectionsResponse {
	return o.Payload
}

func (o *DirectionsForRouteOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.V3DirectionsResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDirectionsForRouteBadRequest creates a DirectionsForRouteBadRequest with default headers values
func NewDirectionsForRouteBadRequest() *DirectionsForRouteBadRequest {
	return &DirectionsForRouteBadRequest{}
}

/*DirectionsForRouteBadRequest handles this case with default header values.

Invalid Request
*/
type DirectionsForRouteBadRequest struct {
	Payload *models.V3ErrorResponse
}

func (o *DirectionsForRouteBadRequest) Error() string {
	return fmt.Sprintf("[GET /v3/directions/route/{route_id}][%d] directionsForRouteBadRequest  %+v", 400, o.Payload)
}

func (o *DirectionsForRouteBadRequest) GetPayload() *models.V3ErrorResponse {
	return o.Payload
}

func (o *DirectionsForRouteBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.V3ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDirectionsForRouteForbidden creates a DirectionsForRouteForbidden with default headers values
func NewDirectionsForRouteForbidden() *DirectionsForRouteForbidden {
	return &DirectionsForRouteForbidden{}
}

/*DirectionsForRouteForbidden handles this case with default header values.

Access Denied
*/
type DirectionsForRouteForbidden struct {
	Payload *models.V3ErrorResponse
}

func (o *DirectionsForRouteForbidden) Error() string {
	return fmt.Sprintf("[GET /v3/directions/route/{route_id}][%d] directionsForRouteForbidden  %+v", 403, o.Payload)
}

func (o *DirectionsForRouteForbidden) GetPayload() *models.V3ErrorResponse {
	return o.Payload
}

func (o *DirectionsForRouteForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.V3ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
