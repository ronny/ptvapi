// Code generated by go-swagger; DO NOT EDIT.

package directions

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/ronny/ptvapi/v3/models"
)

// DirectionsForDirectionAndTypeReader is a Reader for the DirectionsForDirectionAndType structure.
type DirectionsForDirectionAndTypeReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *DirectionsForDirectionAndTypeReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewDirectionsForDirectionAndTypeOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewDirectionsForDirectionAndTypeBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewDirectionsForDirectionAndTypeForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewDirectionsForDirectionAndTypeOK creates a DirectionsForDirectionAndTypeOK with default headers values
func NewDirectionsForDirectionAndTypeOK() *DirectionsForDirectionAndTypeOK {
	return &DirectionsForDirectionAndTypeOK{}
}

/*DirectionsForDirectionAndTypeOK handles this case with default header values.

All routes of the specified route type that travel in the specified direction.
*/
type DirectionsForDirectionAndTypeOK struct {
	Payload *models.V3DirectionsResponse
}

func (o *DirectionsForDirectionAndTypeOK) Error() string {
	return fmt.Sprintf("[GET /v3/directions/{direction_id}/route_type/{route_type}][%d] directionsForDirectionAndTypeOK  %+v", 200, o.Payload)
}

func (o *DirectionsForDirectionAndTypeOK) GetPayload() *models.V3DirectionsResponse {
	return o.Payload
}

func (o *DirectionsForDirectionAndTypeOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.V3DirectionsResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDirectionsForDirectionAndTypeBadRequest creates a DirectionsForDirectionAndTypeBadRequest with default headers values
func NewDirectionsForDirectionAndTypeBadRequest() *DirectionsForDirectionAndTypeBadRequest {
	return &DirectionsForDirectionAndTypeBadRequest{}
}

/*DirectionsForDirectionAndTypeBadRequest handles this case with default header values.

Invalid Request
*/
type DirectionsForDirectionAndTypeBadRequest struct {
	Payload *models.V3ErrorResponse
}

func (o *DirectionsForDirectionAndTypeBadRequest) Error() string {
	return fmt.Sprintf("[GET /v3/directions/{direction_id}/route_type/{route_type}][%d] directionsForDirectionAndTypeBadRequest  %+v", 400, o.Payload)
}

func (o *DirectionsForDirectionAndTypeBadRequest) GetPayload() *models.V3ErrorResponse {
	return o.Payload
}

func (o *DirectionsForDirectionAndTypeBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.V3ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDirectionsForDirectionAndTypeForbidden creates a DirectionsForDirectionAndTypeForbidden with default headers values
func NewDirectionsForDirectionAndTypeForbidden() *DirectionsForDirectionAndTypeForbidden {
	return &DirectionsForDirectionAndTypeForbidden{}
}

/*DirectionsForDirectionAndTypeForbidden handles this case with default header values.

Access Denied
*/
type DirectionsForDirectionAndTypeForbidden struct {
	Payload *models.V3ErrorResponse
}

func (o *DirectionsForDirectionAndTypeForbidden) Error() string {
	return fmt.Sprintf("[GET /v3/directions/{direction_id}/route_type/{route_type}][%d] directionsForDirectionAndTypeForbidden  %+v", 403, o.Payload)
}

func (o *DirectionsForDirectionAndTypeForbidden) GetPayload() *models.V3ErrorResponse {
	return o.Payload
}

func (o *DirectionsForDirectionAndTypeForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.V3ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
