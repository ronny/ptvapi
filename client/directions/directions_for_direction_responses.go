// Code generated by go-swagger; DO NOT EDIT.

package directions

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/ronny/ptvapi/models"
)

// DirectionsForDirectionReader is a Reader for the DirectionsForDirection structure.
type DirectionsForDirectionReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *DirectionsForDirectionReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewDirectionsForDirectionOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewDirectionsForDirectionBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewDirectionsForDirectionForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewDirectionsForDirectionOK creates a DirectionsForDirectionOK with default headers values
func NewDirectionsForDirectionOK() *DirectionsForDirectionOK {
	return &DirectionsForDirectionOK{}
}

/*DirectionsForDirectionOK handles this case with default header values.

All routes that travel in the specified direction.
*/
type DirectionsForDirectionOK struct {
	Payload *models.V3DirectionsResponse
}

func (o *DirectionsForDirectionOK) Error() string {
	return fmt.Sprintf("[GET /v3/directions/{direction_id}][%d] directionsForDirectionOK  %+v", 200, o.Payload)
}

func (o *DirectionsForDirectionOK) GetPayload() *models.V3DirectionsResponse {
	return o.Payload
}

func (o *DirectionsForDirectionOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.V3DirectionsResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDirectionsForDirectionBadRequest creates a DirectionsForDirectionBadRequest with default headers values
func NewDirectionsForDirectionBadRequest() *DirectionsForDirectionBadRequest {
	return &DirectionsForDirectionBadRequest{}
}

/*DirectionsForDirectionBadRequest handles this case with default header values.

Invalid Request
*/
type DirectionsForDirectionBadRequest struct {
	Payload *models.V3ErrorResponse
}

func (o *DirectionsForDirectionBadRequest) Error() string {
	return fmt.Sprintf("[GET /v3/directions/{direction_id}][%d] directionsForDirectionBadRequest  %+v", 400, o.Payload)
}

func (o *DirectionsForDirectionBadRequest) GetPayload() *models.V3ErrorResponse {
	return o.Payload
}

func (o *DirectionsForDirectionBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.V3ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDirectionsForDirectionForbidden creates a DirectionsForDirectionForbidden with default headers values
func NewDirectionsForDirectionForbidden() *DirectionsForDirectionForbidden {
	return &DirectionsForDirectionForbidden{}
}

/*DirectionsForDirectionForbidden handles this case with default header values.

Access Denied
*/
type DirectionsForDirectionForbidden struct {
	Payload *models.V3ErrorResponse
}

func (o *DirectionsForDirectionForbidden) Error() string {
	return fmt.Sprintf("[GET /v3/directions/{direction_id}][%d] directionsForDirectionForbidden  %+v", 403, o.Payload)
}

func (o *DirectionsForDirectionForbidden) GetPayload() *models.V3ErrorResponse {
	return o.Payload
}

func (o *DirectionsForDirectionForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.V3ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
