// Code generated by go-swagger; DO NOT EDIT.

package routes

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/ronny/ptvapi/v3/models"
)

// RoutesOneOrMoreRoutesReader is a Reader for the RoutesOneOrMoreRoutes structure.
type RoutesOneOrMoreRoutesReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *RoutesOneOrMoreRoutesReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewRoutesOneOrMoreRoutesOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewRoutesOneOrMoreRoutesBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewRoutesOneOrMoreRoutesForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewRoutesOneOrMoreRoutesOK creates a RoutesOneOrMoreRoutesOK with default headers values
func NewRoutesOneOrMoreRoutesOK() *RoutesOneOrMoreRoutesOK {
	return &RoutesOneOrMoreRoutesOK{}
}

/*RoutesOneOrMoreRoutesOK handles this case with default header values.

Route names and numbers for all routes of all route types.
*/
type RoutesOneOrMoreRoutesOK struct {
	Payload *models.V3RoutesResponse
}

func (o *RoutesOneOrMoreRoutesOK) Error() string {
	return fmt.Sprintf("[GET /v3/routes][%d] routesOneOrMoreRoutesOK  %+v", 200, o.Payload)
}

func (o *RoutesOneOrMoreRoutesOK) GetPayload() *models.V3RoutesResponse {
	return o.Payload
}

func (o *RoutesOneOrMoreRoutesOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.V3RoutesResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewRoutesOneOrMoreRoutesBadRequest creates a RoutesOneOrMoreRoutesBadRequest with default headers values
func NewRoutesOneOrMoreRoutesBadRequest() *RoutesOneOrMoreRoutesBadRequest {
	return &RoutesOneOrMoreRoutesBadRequest{}
}

/*RoutesOneOrMoreRoutesBadRequest handles this case with default header values.

Invalid Request
*/
type RoutesOneOrMoreRoutesBadRequest struct {
	Payload *models.V3ErrorResponse
}

func (o *RoutesOneOrMoreRoutesBadRequest) Error() string {
	return fmt.Sprintf("[GET /v3/routes][%d] routesOneOrMoreRoutesBadRequest  %+v", 400, o.Payload)
}

func (o *RoutesOneOrMoreRoutesBadRequest) GetPayload() *models.V3ErrorResponse {
	return o.Payload
}

func (o *RoutesOneOrMoreRoutesBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.V3ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewRoutesOneOrMoreRoutesForbidden creates a RoutesOneOrMoreRoutesForbidden with default headers values
func NewRoutesOneOrMoreRoutesForbidden() *RoutesOneOrMoreRoutesForbidden {
	return &RoutesOneOrMoreRoutesForbidden{}
}

/*RoutesOneOrMoreRoutesForbidden handles this case with default header values.

Access Denied
*/
type RoutesOneOrMoreRoutesForbidden struct {
	Payload *models.V3ErrorResponse
}

func (o *RoutesOneOrMoreRoutesForbidden) Error() string {
	return fmt.Sprintf("[GET /v3/routes][%d] routesOneOrMoreRoutesForbidden  %+v", 403, o.Payload)
}

func (o *RoutesOneOrMoreRoutesForbidden) GetPayload() *models.V3ErrorResponse {
	return o.Payload
}

func (o *RoutesOneOrMoreRoutesForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.V3ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
