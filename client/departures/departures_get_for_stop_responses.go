// Code generated by go-swagger; DO NOT EDIT.

package departures

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/ronny/ptvapi/v3/models"
)

// DeparturesGetForStopReader is a Reader for the DeparturesGetForStop structure.
type DeparturesGetForStopReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *DeparturesGetForStopReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewDeparturesGetForStopOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewDeparturesGetForStopBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewDeparturesGetForStopForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewDeparturesGetForStopOK creates a DeparturesGetForStopOK with default headers values
func NewDeparturesGetForStopOK() *DeparturesGetForStopOK {
	return &DeparturesGetForStopOK{}
}

/*DeparturesGetForStopOK handles this case with default header values.

Service departures from the specified stop for all routes of the specified route type; departures are timetabled and real-time (if applicable).
*/
type DeparturesGetForStopOK struct {
	Payload *models.V3DeparturesResponse
}

func (o *DeparturesGetForStopOK) Error() string {
	return fmt.Sprintf("[GET /v3/departures/route_type/{route_type}/stop/{stop_id}][%d] departuresGetForStopOK  %+v", 200, o.Payload)
}

func (o *DeparturesGetForStopOK) GetPayload() *models.V3DeparturesResponse {
	return o.Payload
}

func (o *DeparturesGetForStopOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.V3DeparturesResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeparturesGetForStopBadRequest creates a DeparturesGetForStopBadRequest with default headers values
func NewDeparturesGetForStopBadRequest() *DeparturesGetForStopBadRequest {
	return &DeparturesGetForStopBadRequest{}
}

/*DeparturesGetForStopBadRequest handles this case with default header values.

Invalid Request
*/
type DeparturesGetForStopBadRequest struct {
	Payload *models.V3ErrorResponse
}

func (o *DeparturesGetForStopBadRequest) Error() string {
	return fmt.Sprintf("[GET /v3/departures/route_type/{route_type}/stop/{stop_id}][%d] departuresGetForStopBadRequest  %+v", 400, o.Payload)
}

func (o *DeparturesGetForStopBadRequest) GetPayload() *models.V3ErrorResponse {
	return o.Payload
}

func (o *DeparturesGetForStopBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.V3ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeparturesGetForStopForbidden creates a DeparturesGetForStopForbidden with default headers values
func NewDeparturesGetForStopForbidden() *DeparturesGetForStopForbidden {
	return &DeparturesGetForStopForbidden{}
}

/*DeparturesGetForStopForbidden handles this case with default header values.

Access Denied
*/
type DeparturesGetForStopForbidden struct {
	Payload *models.V3ErrorResponse
}

func (o *DeparturesGetForStopForbidden) Error() string {
	return fmt.Sprintf("[GET /v3/departures/route_type/{route_type}/stop/{stop_id}][%d] departuresGetForStopForbidden  %+v", 403, o.Payload)
}

func (o *DeparturesGetForStopForbidden) GetPayload() *models.V3ErrorResponse {
	return o.Payload
}

func (o *DeparturesGetForStopForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.V3ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
