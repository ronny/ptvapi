// Code generated by go-swagger; DO NOT EDIT.

package disruptions

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/ronny/ptvapi/models"
)

// DisruptionsGetDisruptionModesReader is a Reader for the DisruptionsGetDisruptionModes structure.
type DisruptionsGetDisruptionModesReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *DisruptionsGetDisruptionModesReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewDisruptionsGetDisruptionModesOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewDisruptionsGetDisruptionModesBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewDisruptionsGetDisruptionModesForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewDisruptionsGetDisruptionModesOK creates a DisruptionsGetDisruptionModesOK with default headers values
func NewDisruptionsGetDisruptionModesOK() *DisruptionsGetDisruptionModesOK {
	return &DisruptionsGetDisruptionModesOK{}
}

/*DisruptionsGetDisruptionModesOK handles this case with default header values.

Disruption specific modes
*/
type DisruptionsGetDisruptionModesOK struct {
	Payload *models.V3DisruptionModesResponse
}

func (o *DisruptionsGetDisruptionModesOK) Error() string {
	return fmt.Sprintf("[GET /v3/disruptions/modes][%d] disruptionsGetDisruptionModesOK  %+v", 200, o.Payload)
}

func (o *DisruptionsGetDisruptionModesOK) GetPayload() *models.V3DisruptionModesResponse {
	return o.Payload
}

func (o *DisruptionsGetDisruptionModesOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.V3DisruptionModesResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDisruptionsGetDisruptionModesBadRequest creates a DisruptionsGetDisruptionModesBadRequest with default headers values
func NewDisruptionsGetDisruptionModesBadRequest() *DisruptionsGetDisruptionModesBadRequest {
	return &DisruptionsGetDisruptionModesBadRequest{}
}

/*DisruptionsGetDisruptionModesBadRequest handles this case with default header values.

Invalid Request
*/
type DisruptionsGetDisruptionModesBadRequest struct {
	Payload *models.V3ErrorResponse
}

func (o *DisruptionsGetDisruptionModesBadRequest) Error() string {
	return fmt.Sprintf("[GET /v3/disruptions/modes][%d] disruptionsGetDisruptionModesBadRequest  %+v", 400, o.Payload)
}

func (o *DisruptionsGetDisruptionModesBadRequest) GetPayload() *models.V3ErrorResponse {
	return o.Payload
}

func (o *DisruptionsGetDisruptionModesBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.V3ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDisruptionsGetDisruptionModesForbidden creates a DisruptionsGetDisruptionModesForbidden with default headers values
func NewDisruptionsGetDisruptionModesForbidden() *DisruptionsGetDisruptionModesForbidden {
	return &DisruptionsGetDisruptionModesForbidden{}
}

/*DisruptionsGetDisruptionModesForbidden handles this case with default header values.

Access Denied
*/
type DisruptionsGetDisruptionModesForbidden struct {
	Payload *models.V3ErrorResponse
}

func (o *DisruptionsGetDisruptionModesForbidden) Error() string {
	return fmt.Sprintf("[GET /v3/disruptions/modes][%d] disruptionsGetDisruptionModesForbidden  %+v", 403, o.Payload)
}

func (o *DisruptionsGetDisruptionModesForbidden) GetPayload() *models.V3ErrorResponse {
	return o.Payload
}

func (o *DisruptionsGetDisruptionModesForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.V3ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
