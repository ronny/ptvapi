// Code generated by go-swagger; DO NOT EDIT.

package disruptions

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/ronny/ptvapi/v3/models"
)

// DisruptionsGetDisruptionByIDReader is a Reader for the DisruptionsGetDisruptionByID structure.
type DisruptionsGetDisruptionByIDReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *DisruptionsGetDisruptionByIDReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewDisruptionsGetDisruptionByIDOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewDisruptionsGetDisruptionByIDBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewDisruptionsGetDisruptionByIDForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewDisruptionsGetDisruptionByIDOK creates a DisruptionsGetDisruptionByIDOK with default headers values
func NewDisruptionsGetDisruptionByIDOK() *DisruptionsGetDisruptionByIDOK {
	return &DisruptionsGetDisruptionByIDOK{}
}

/*DisruptionsGetDisruptionByIDOK handles this case with default header values.

Disruption information for the specified disruption ID.
*/
type DisruptionsGetDisruptionByIDOK struct {
	Payload *models.V3DisruptionResponse
}

func (o *DisruptionsGetDisruptionByIDOK) Error() string {
	return fmt.Sprintf("[GET /v3/disruptions/{disruption_id}][%d] disruptionsGetDisruptionByIdOK  %+v", 200, o.Payload)
}

func (o *DisruptionsGetDisruptionByIDOK) GetPayload() *models.V3DisruptionResponse {
	return o.Payload
}

func (o *DisruptionsGetDisruptionByIDOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.V3DisruptionResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDisruptionsGetDisruptionByIDBadRequest creates a DisruptionsGetDisruptionByIDBadRequest with default headers values
func NewDisruptionsGetDisruptionByIDBadRequest() *DisruptionsGetDisruptionByIDBadRequest {
	return &DisruptionsGetDisruptionByIDBadRequest{}
}

/*DisruptionsGetDisruptionByIDBadRequest handles this case with default header values.

Invalid Request
*/
type DisruptionsGetDisruptionByIDBadRequest struct {
	Payload *models.V3ErrorResponse
}

func (o *DisruptionsGetDisruptionByIDBadRequest) Error() string {
	return fmt.Sprintf("[GET /v3/disruptions/{disruption_id}][%d] disruptionsGetDisruptionByIdBadRequest  %+v", 400, o.Payload)
}

func (o *DisruptionsGetDisruptionByIDBadRequest) GetPayload() *models.V3ErrorResponse {
	return o.Payload
}

func (o *DisruptionsGetDisruptionByIDBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.V3ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDisruptionsGetDisruptionByIDForbidden creates a DisruptionsGetDisruptionByIDForbidden with default headers values
func NewDisruptionsGetDisruptionByIDForbidden() *DisruptionsGetDisruptionByIDForbidden {
	return &DisruptionsGetDisruptionByIDForbidden{}
}

/*DisruptionsGetDisruptionByIDForbidden handles this case with default header values.

Access Denied
*/
type DisruptionsGetDisruptionByIDForbidden struct {
	Payload *models.V3ErrorResponse
}

func (o *DisruptionsGetDisruptionByIDForbidden) Error() string {
	return fmt.Sprintf("[GET /v3/disruptions/{disruption_id}][%d] disruptionsGetDisruptionByIdForbidden  %+v", 403, o.Payload)
}

func (o *DisruptionsGetDisruptionByIDForbidden) GetPayload() *models.V3ErrorResponse {
	return o.Payload
}

func (o *DisruptionsGetDisruptionByIDForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.V3ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
