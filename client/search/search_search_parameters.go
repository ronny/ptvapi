// Code generated by go-swagger; DO NOT EDIT.

package search

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"
)

// NewSearchSearchParams creates a new SearchSearchParams object
// with the default values initialized.
func NewSearchSearchParams() *SearchSearchParams {
	var ()
	return &SearchSearchParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewSearchSearchParamsWithTimeout creates a new SearchSearchParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewSearchSearchParamsWithTimeout(timeout time.Duration) *SearchSearchParams {
	var ()
	return &SearchSearchParams{

		timeout: timeout,
	}
}

// NewSearchSearchParamsWithContext creates a new SearchSearchParams object
// with the default values initialized, and the ability to set a context for a request
func NewSearchSearchParamsWithContext(ctx context.Context) *SearchSearchParams {
	var ()
	return &SearchSearchParams{

		Context: ctx,
	}
}

// NewSearchSearchParamsWithHTTPClient creates a new SearchSearchParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewSearchSearchParamsWithHTTPClient(client *http.Client) *SearchSearchParams {
	var ()
	return &SearchSearchParams{
		HTTPClient: client,
	}
}

/*SearchSearchParams contains all the parameters to send to the API endpoint
for the search search operation typically these are written to a http.Request
*/
type SearchSearchParams struct {

	/*Devid
	  Your developer id

	*/
	Devid *string
	/*IncludeAddresses
	  Placeholder for future development; currently unavailable

	*/
	IncludeAddresses *bool
	/*IncludeOutlets
	  Indicates if outlets will be returned in response (default = true)

	*/
	IncludeOutlets *bool
	/*Latitude
	  Filter by geographic coordinate of latitude

	*/
	Latitude *float32
	/*Longitude
	  Filter by geographic coordinate of longitude

	*/
	Longitude *float32
	/*MatchRouteBySuburb
	  Indicates whether to find routes by suburbs in the search term (default = true)

	*/
	MatchRouteBySuburb *bool
	/*MatchStopByGtfsStopID
	  Indicates whether to search for stops according to a metlink stop ID (default = false)

	*/
	MatchStopByGtfsStopID *bool
	/*MatchStopBySuburb
	  Indicates whether to find stops by suburbs in the search term (default = true)

	*/
	MatchStopBySuburb *bool
	/*MaxDistance
	  Filter by maximum distance (in metres) from location specified via latitude and longitude parameters

	*/
	MaxDistance *float32
	/*RouteTypes
	  Filter by route_type; values returned via RouteTypes API (note: stops and routes are ordered by route_types specified)

	*/
	RouteTypes []int32
	/*SearchTerm
	  Search text (note: if search text is numeric and/or less than 3 characters, the API will only return routes)

	*/
	SearchTerm string
	/*Signature
	  Authentication signature for request

	*/
	Signature *string
	/*Token
	  Please ignore

	*/
	Token *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the search search params
func (o *SearchSearchParams) WithTimeout(timeout time.Duration) *SearchSearchParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the search search params
func (o *SearchSearchParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the search search params
func (o *SearchSearchParams) WithContext(ctx context.Context) *SearchSearchParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the search search params
func (o *SearchSearchParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the search search params
func (o *SearchSearchParams) WithHTTPClient(client *http.Client) *SearchSearchParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the search search params
func (o *SearchSearchParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithDevid adds the devid to the search search params
func (o *SearchSearchParams) WithDevid(devid *string) *SearchSearchParams {
	o.SetDevid(devid)
	return o
}

// SetDevid adds the devid to the search search params
func (o *SearchSearchParams) SetDevid(devid *string) {
	o.Devid = devid
}

// WithIncludeAddresses adds the includeAddresses to the search search params
func (o *SearchSearchParams) WithIncludeAddresses(includeAddresses *bool) *SearchSearchParams {
	o.SetIncludeAddresses(includeAddresses)
	return o
}

// SetIncludeAddresses adds the includeAddresses to the search search params
func (o *SearchSearchParams) SetIncludeAddresses(includeAddresses *bool) {
	o.IncludeAddresses = includeAddresses
}

// WithIncludeOutlets adds the includeOutlets to the search search params
func (o *SearchSearchParams) WithIncludeOutlets(includeOutlets *bool) *SearchSearchParams {
	o.SetIncludeOutlets(includeOutlets)
	return o
}

// SetIncludeOutlets adds the includeOutlets to the search search params
func (o *SearchSearchParams) SetIncludeOutlets(includeOutlets *bool) {
	o.IncludeOutlets = includeOutlets
}

// WithLatitude adds the latitude to the search search params
func (o *SearchSearchParams) WithLatitude(latitude *float32) *SearchSearchParams {
	o.SetLatitude(latitude)
	return o
}

// SetLatitude adds the latitude to the search search params
func (o *SearchSearchParams) SetLatitude(latitude *float32) {
	o.Latitude = latitude
}

// WithLongitude adds the longitude to the search search params
func (o *SearchSearchParams) WithLongitude(longitude *float32) *SearchSearchParams {
	o.SetLongitude(longitude)
	return o
}

// SetLongitude adds the longitude to the search search params
func (o *SearchSearchParams) SetLongitude(longitude *float32) {
	o.Longitude = longitude
}

// WithMatchRouteBySuburb adds the matchRouteBySuburb to the search search params
func (o *SearchSearchParams) WithMatchRouteBySuburb(matchRouteBySuburb *bool) *SearchSearchParams {
	o.SetMatchRouteBySuburb(matchRouteBySuburb)
	return o
}

// SetMatchRouteBySuburb adds the matchRouteBySuburb to the search search params
func (o *SearchSearchParams) SetMatchRouteBySuburb(matchRouteBySuburb *bool) {
	o.MatchRouteBySuburb = matchRouteBySuburb
}

// WithMatchStopByGtfsStopID adds the matchStopByGtfsStopID to the search search params
func (o *SearchSearchParams) WithMatchStopByGtfsStopID(matchStopByGtfsStopID *bool) *SearchSearchParams {
	o.SetMatchStopByGtfsStopID(matchStopByGtfsStopID)
	return o
}

// SetMatchStopByGtfsStopID adds the matchStopByGtfsStopId to the search search params
func (o *SearchSearchParams) SetMatchStopByGtfsStopID(matchStopByGtfsStopID *bool) {
	o.MatchStopByGtfsStopID = matchStopByGtfsStopID
}

// WithMatchStopBySuburb adds the matchStopBySuburb to the search search params
func (o *SearchSearchParams) WithMatchStopBySuburb(matchStopBySuburb *bool) *SearchSearchParams {
	o.SetMatchStopBySuburb(matchStopBySuburb)
	return o
}

// SetMatchStopBySuburb adds the matchStopBySuburb to the search search params
func (o *SearchSearchParams) SetMatchStopBySuburb(matchStopBySuburb *bool) {
	o.MatchStopBySuburb = matchStopBySuburb
}

// WithMaxDistance adds the maxDistance to the search search params
func (o *SearchSearchParams) WithMaxDistance(maxDistance *float32) *SearchSearchParams {
	o.SetMaxDistance(maxDistance)
	return o
}

// SetMaxDistance adds the maxDistance to the search search params
func (o *SearchSearchParams) SetMaxDistance(maxDistance *float32) {
	o.MaxDistance = maxDistance
}

// WithRouteTypes adds the routeTypes to the search search params
func (o *SearchSearchParams) WithRouteTypes(routeTypes []int32) *SearchSearchParams {
	o.SetRouteTypes(routeTypes)
	return o
}

// SetRouteTypes adds the routeTypes to the search search params
func (o *SearchSearchParams) SetRouteTypes(routeTypes []int32) {
	o.RouteTypes = routeTypes
}

// WithSearchTerm adds the searchTerm to the search search params
func (o *SearchSearchParams) WithSearchTerm(searchTerm string) *SearchSearchParams {
	o.SetSearchTerm(searchTerm)
	return o
}

// SetSearchTerm adds the searchTerm to the search search params
func (o *SearchSearchParams) SetSearchTerm(searchTerm string) {
	o.SearchTerm = searchTerm
}

// WithSignature adds the signature to the search search params
func (o *SearchSearchParams) WithSignature(signature *string) *SearchSearchParams {
	o.SetSignature(signature)
	return o
}

// SetSignature adds the signature to the search search params
func (o *SearchSearchParams) SetSignature(signature *string) {
	o.Signature = signature
}

// WithToken adds the token to the search search params
func (o *SearchSearchParams) WithToken(token *string) *SearchSearchParams {
	o.SetToken(token)
	return o
}

// SetToken adds the token to the search search params
func (o *SearchSearchParams) SetToken(token *string) {
	o.Token = token
}

// WriteToRequest writes these params to a swagger request
func (o *SearchSearchParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Devid != nil {

		// query param devid
		var qrDevid string
		if o.Devid != nil {
			qrDevid = *o.Devid
		}
		qDevid := qrDevid
		if qDevid != "" {
			if err := r.SetQueryParam("devid", qDevid); err != nil {
				return err
			}
		}

	}

	if o.IncludeAddresses != nil {

		// query param include_addresses
		var qrIncludeAddresses bool
		if o.IncludeAddresses != nil {
			qrIncludeAddresses = *o.IncludeAddresses
		}
		qIncludeAddresses := swag.FormatBool(qrIncludeAddresses)
		if qIncludeAddresses != "" {
			if err := r.SetQueryParam("include_addresses", qIncludeAddresses); err != nil {
				return err
			}
		}

	}

	if o.IncludeOutlets != nil {

		// query param include_outlets
		var qrIncludeOutlets bool
		if o.IncludeOutlets != nil {
			qrIncludeOutlets = *o.IncludeOutlets
		}
		qIncludeOutlets := swag.FormatBool(qrIncludeOutlets)
		if qIncludeOutlets != "" {
			if err := r.SetQueryParam("include_outlets", qIncludeOutlets); err != nil {
				return err
			}
		}

	}

	if o.Latitude != nil {

		// query param latitude
		var qrLatitude float32
		if o.Latitude != nil {
			qrLatitude = *o.Latitude
		}
		qLatitude := swag.FormatFloat32(qrLatitude)
		if qLatitude != "" {
			if err := r.SetQueryParam("latitude", qLatitude); err != nil {
				return err
			}
		}

	}

	if o.Longitude != nil {

		// query param longitude
		var qrLongitude float32
		if o.Longitude != nil {
			qrLongitude = *o.Longitude
		}
		qLongitude := swag.FormatFloat32(qrLongitude)
		if qLongitude != "" {
			if err := r.SetQueryParam("longitude", qLongitude); err != nil {
				return err
			}
		}

	}

	if o.MatchRouteBySuburb != nil {

		// query param match_route_by_suburb
		var qrMatchRouteBySuburb bool
		if o.MatchRouteBySuburb != nil {
			qrMatchRouteBySuburb = *o.MatchRouteBySuburb
		}
		qMatchRouteBySuburb := swag.FormatBool(qrMatchRouteBySuburb)
		if qMatchRouteBySuburb != "" {
			if err := r.SetQueryParam("match_route_by_suburb", qMatchRouteBySuburb); err != nil {
				return err
			}
		}

	}

	if o.MatchStopByGtfsStopID != nil {

		// query param match_stop_by_gtfs_stop_id
		var qrMatchStopByGtfsStopID bool
		if o.MatchStopByGtfsStopID != nil {
			qrMatchStopByGtfsStopID = *o.MatchStopByGtfsStopID
		}
		qMatchStopByGtfsStopID := swag.FormatBool(qrMatchStopByGtfsStopID)
		if qMatchStopByGtfsStopID != "" {
			if err := r.SetQueryParam("match_stop_by_gtfs_stop_id", qMatchStopByGtfsStopID); err != nil {
				return err
			}
		}

	}

	if o.MatchStopBySuburb != nil {

		// query param match_stop_by_suburb
		var qrMatchStopBySuburb bool
		if o.MatchStopBySuburb != nil {
			qrMatchStopBySuburb = *o.MatchStopBySuburb
		}
		qMatchStopBySuburb := swag.FormatBool(qrMatchStopBySuburb)
		if qMatchStopBySuburb != "" {
			if err := r.SetQueryParam("match_stop_by_suburb", qMatchStopBySuburb); err != nil {
				return err
			}
		}

	}

	if o.MaxDistance != nil {

		// query param max_distance
		var qrMaxDistance float32
		if o.MaxDistance != nil {
			qrMaxDistance = *o.MaxDistance
		}
		qMaxDistance := swag.FormatFloat32(qrMaxDistance)
		if qMaxDistance != "" {
			if err := r.SetQueryParam("max_distance", qMaxDistance); err != nil {
				return err
			}
		}

	}

	var valuesRouteTypes []string
	for _, v := range o.RouteTypes {
		valuesRouteTypes = append(valuesRouteTypes, swag.FormatInt32(v))
	}

	joinedRouteTypes := swag.JoinByFormat(valuesRouteTypes, "multi")
	// query array param route_types
	if err := r.SetQueryParam("route_types", joinedRouteTypes...); err != nil {
		return err
	}

	// path param search_term
	if err := r.SetPathParam("search_term", o.SearchTerm); err != nil {
		return err
	}

	if o.Signature != nil {

		// query param signature
		var qrSignature string
		if o.Signature != nil {
			qrSignature = *o.Signature
		}
		qSignature := qrSignature
		if qSignature != "" {
			if err := r.SetQueryParam("signature", qSignature); err != nil {
				return err
			}
		}

	}

	if o.Token != nil {

		// query param token
		var qrToken string
		if o.Token != nil {
			qrToken = *o.Token
		}
		qToken := qrToken
		if qToken != "" {
			if err := r.SetQueryParam("token", qToken); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
