// Code generated by go-swagger; DO NOT EDIT.

package stops

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/ronny/ptvapi/v3/models"
)

// StopsStopsByGeolocationReader is a Reader for the StopsStopsByGeolocation structure.
type StopsStopsByGeolocationReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *StopsStopsByGeolocationReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewStopsStopsByGeolocationOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewStopsStopsByGeolocationBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewStopsStopsByGeolocationForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewStopsStopsByGeolocationOK creates a StopsStopsByGeolocationOK with default headers values
func NewStopsStopsByGeolocationOK() *StopsStopsByGeolocationOK {
	return &StopsStopsByGeolocationOK{}
}

/*StopsStopsByGeolocationOK handles this case with default header values.

All stops near the specified location.
*/
type StopsStopsByGeolocationOK struct {
	Payload *models.V3StopsByDistanceResponse
}

func (o *StopsStopsByGeolocationOK) Error() string {
	return fmt.Sprintf("[GET /v3/stops/location/{latitude},{longitude}][%d] stopsStopsByGeolocationOK  %+v", 200, o.Payload)
}

func (o *StopsStopsByGeolocationOK) GetPayload() *models.V3StopsByDistanceResponse {
	return o.Payload
}

func (o *StopsStopsByGeolocationOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.V3StopsByDistanceResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewStopsStopsByGeolocationBadRequest creates a StopsStopsByGeolocationBadRequest with default headers values
func NewStopsStopsByGeolocationBadRequest() *StopsStopsByGeolocationBadRequest {
	return &StopsStopsByGeolocationBadRequest{}
}

/*StopsStopsByGeolocationBadRequest handles this case with default header values.

Invalid Request
*/
type StopsStopsByGeolocationBadRequest struct {
	Payload *models.V3ErrorResponse
}

func (o *StopsStopsByGeolocationBadRequest) Error() string {
	return fmt.Sprintf("[GET /v3/stops/location/{latitude},{longitude}][%d] stopsStopsByGeolocationBadRequest  %+v", 400, o.Payload)
}

func (o *StopsStopsByGeolocationBadRequest) GetPayload() *models.V3ErrorResponse {
	return o.Payload
}

func (o *StopsStopsByGeolocationBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.V3ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewStopsStopsByGeolocationForbidden creates a StopsStopsByGeolocationForbidden with default headers values
func NewStopsStopsByGeolocationForbidden() *StopsStopsByGeolocationForbidden {
	return &StopsStopsByGeolocationForbidden{}
}

/*StopsStopsByGeolocationForbidden handles this case with default header values.

Access Denied
*/
type StopsStopsByGeolocationForbidden struct {
	Payload *models.V3ErrorResponse
}

func (o *StopsStopsByGeolocationForbidden) Error() string {
	return fmt.Sprintf("[GET /v3/stops/location/{latitude},{longitude}][%d] stopsStopsByGeolocationForbidden  %+v", 403, o.Payload)
}

func (o *StopsStopsByGeolocationForbidden) GetPayload() *models.V3ErrorResponse {
	return o.Payload
}

func (o *StopsStopsByGeolocationForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.V3ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
