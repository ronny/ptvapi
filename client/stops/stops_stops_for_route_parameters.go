// Code generated by go-swagger; DO NOT EDIT.

package stops

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"
)

// NewStopsStopsForRouteParams creates a new StopsStopsForRouteParams object
// with the default values initialized.
func NewStopsStopsForRouteParams() *StopsStopsForRouteParams {
	var ()
	return &StopsStopsForRouteParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewStopsStopsForRouteParamsWithTimeout creates a new StopsStopsForRouteParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewStopsStopsForRouteParamsWithTimeout(timeout time.Duration) *StopsStopsForRouteParams {
	var ()
	return &StopsStopsForRouteParams{

		timeout: timeout,
	}
}

// NewStopsStopsForRouteParamsWithContext creates a new StopsStopsForRouteParams object
// with the default values initialized, and the ability to set a context for a request
func NewStopsStopsForRouteParamsWithContext(ctx context.Context) *StopsStopsForRouteParams {
	var ()
	return &StopsStopsForRouteParams{

		Context: ctx,
	}
}

// NewStopsStopsForRouteParamsWithHTTPClient creates a new StopsStopsForRouteParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewStopsStopsForRouteParamsWithHTTPClient(client *http.Client) *StopsStopsForRouteParams {
	var ()
	return &StopsStopsForRouteParams{
		HTTPClient: client,
	}
}

/*StopsStopsForRouteParams contains all the parameters to send to the API endpoint
for the stops stops for route operation typically these are written to a http.Request
*/
type StopsStopsForRouteParams struct {

	/*Devid
	  Your developer id

	*/
	Devid *string
	/*DirectionID
	  An optional direction; values returned by Directions API. When this is set, stop sequence information is returned in the response.

	*/
	DirectionID *int32
	/*RouteID
	  Identifier of route; values returned by Routes API - v3/routes

	*/
	RouteID int32
	/*RouteType
	  Number identifying transport mode; values returned via RouteTypes API

	*/
	RouteType int32
	/*Signature
	  Authentication signature for request

	*/
	Signature *string
	/*StopDisruptions
	  Indicates if stop disruption information will be returned (default = false)

	*/
	StopDisruptions *bool
	/*Token
	  Please ignore

	*/
	Token *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the stops stops for route params
func (o *StopsStopsForRouteParams) WithTimeout(timeout time.Duration) *StopsStopsForRouteParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the stops stops for route params
func (o *StopsStopsForRouteParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the stops stops for route params
func (o *StopsStopsForRouteParams) WithContext(ctx context.Context) *StopsStopsForRouteParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the stops stops for route params
func (o *StopsStopsForRouteParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the stops stops for route params
func (o *StopsStopsForRouteParams) WithHTTPClient(client *http.Client) *StopsStopsForRouteParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the stops stops for route params
func (o *StopsStopsForRouteParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithDevid adds the devid to the stops stops for route params
func (o *StopsStopsForRouteParams) WithDevid(devid *string) *StopsStopsForRouteParams {
	o.SetDevid(devid)
	return o
}

// SetDevid adds the devid to the stops stops for route params
func (o *StopsStopsForRouteParams) SetDevid(devid *string) {
	o.Devid = devid
}

// WithDirectionID adds the directionID to the stops stops for route params
func (o *StopsStopsForRouteParams) WithDirectionID(directionID *int32) *StopsStopsForRouteParams {
	o.SetDirectionID(directionID)
	return o
}

// SetDirectionID adds the directionId to the stops stops for route params
func (o *StopsStopsForRouteParams) SetDirectionID(directionID *int32) {
	o.DirectionID = directionID
}

// WithRouteID adds the routeID to the stops stops for route params
func (o *StopsStopsForRouteParams) WithRouteID(routeID int32) *StopsStopsForRouteParams {
	o.SetRouteID(routeID)
	return o
}

// SetRouteID adds the routeId to the stops stops for route params
func (o *StopsStopsForRouteParams) SetRouteID(routeID int32) {
	o.RouteID = routeID
}

// WithRouteType adds the routeType to the stops stops for route params
func (o *StopsStopsForRouteParams) WithRouteType(routeType int32) *StopsStopsForRouteParams {
	o.SetRouteType(routeType)
	return o
}

// SetRouteType adds the routeType to the stops stops for route params
func (o *StopsStopsForRouteParams) SetRouteType(routeType int32) {
	o.RouteType = routeType
}

// WithSignature adds the signature to the stops stops for route params
func (o *StopsStopsForRouteParams) WithSignature(signature *string) *StopsStopsForRouteParams {
	o.SetSignature(signature)
	return o
}

// SetSignature adds the signature to the stops stops for route params
func (o *StopsStopsForRouteParams) SetSignature(signature *string) {
	o.Signature = signature
}

// WithStopDisruptions adds the stopDisruptions to the stops stops for route params
func (o *StopsStopsForRouteParams) WithStopDisruptions(stopDisruptions *bool) *StopsStopsForRouteParams {
	o.SetStopDisruptions(stopDisruptions)
	return o
}

// SetStopDisruptions adds the stopDisruptions to the stops stops for route params
func (o *StopsStopsForRouteParams) SetStopDisruptions(stopDisruptions *bool) {
	o.StopDisruptions = stopDisruptions
}

// WithToken adds the token to the stops stops for route params
func (o *StopsStopsForRouteParams) WithToken(token *string) *StopsStopsForRouteParams {
	o.SetToken(token)
	return o
}

// SetToken adds the token to the stops stops for route params
func (o *StopsStopsForRouteParams) SetToken(token *string) {
	o.Token = token
}

// WriteToRequest writes these params to a swagger request
func (o *StopsStopsForRouteParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Devid != nil {

		// query param devid
		var qrDevid string
		if o.Devid != nil {
			qrDevid = *o.Devid
		}
		qDevid := qrDevid
		if qDevid != "" {
			if err := r.SetQueryParam("devid", qDevid); err != nil {
				return err
			}
		}

	}

	if o.DirectionID != nil {

		// query param direction_id
		var qrDirectionID int32
		if o.DirectionID != nil {
			qrDirectionID = *o.DirectionID
		}
		qDirectionID := swag.FormatInt32(qrDirectionID)
		if qDirectionID != "" {
			if err := r.SetQueryParam("direction_id", qDirectionID); err != nil {
				return err
			}
		}

	}

	// path param route_id
	if err := r.SetPathParam("route_id", swag.FormatInt32(o.RouteID)); err != nil {
		return err
	}

	// path param route_type
	if err := r.SetPathParam("route_type", swag.FormatInt32(o.RouteType)); err != nil {
		return err
	}

	if o.Signature != nil {

		// query param signature
		var qrSignature string
		if o.Signature != nil {
			qrSignature = *o.Signature
		}
		qSignature := qrSignature
		if qSignature != "" {
			if err := r.SetQueryParam("signature", qSignature); err != nil {
				return err
			}
		}

	}

	if o.StopDisruptions != nil {

		// query param stop_disruptions
		var qrStopDisruptions bool
		if o.StopDisruptions != nil {
			qrStopDisruptions = *o.StopDisruptions
		}
		qStopDisruptions := swag.FormatBool(qrStopDisruptions)
		if qStopDisruptions != "" {
			if err := r.SetQueryParam("stop_disruptions", qStopDisruptions); err != nil {
				return err
			}
		}

	}

	if o.Token != nil {

		// query param token
		var qrToken string
		if o.Token != nil {
			qrToken = *o.Token
		}
		qToken := qrToken
		if qToken != "" {
			if err := r.SetQueryParam("token", qToken); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
