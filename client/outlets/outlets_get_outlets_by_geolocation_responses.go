// Code generated by go-swagger; DO NOT EDIT.

package outlets

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/ronny/ptvapi/models"
)

// OutletsGetOutletsByGeolocationReader is a Reader for the OutletsGetOutletsByGeolocation structure.
type OutletsGetOutletsByGeolocationReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *OutletsGetOutletsByGeolocationReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewOutletsGetOutletsByGeolocationOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewOutletsGetOutletsByGeolocationBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewOutletsGetOutletsByGeolocationForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewOutletsGetOutletsByGeolocationOK creates a OutletsGetOutletsByGeolocationOK with default headers values
func NewOutletsGetOutletsByGeolocationOK() *OutletsGetOutletsByGeolocationOK {
	return &OutletsGetOutletsByGeolocationOK{}
}

/*OutletsGetOutletsByGeolocationOK handles this case with default header values.

Ticket outlets near the specified location.
*/
type OutletsGetOutletsByGeolocationOK struct {
	Payload *models.V3OutletGeolocationResponse
}

func (o *OutletsGetOutletsByGeolocationOK) Error() string {
	return fmt.Sprintf("[GET /v3/outlets/location/{latitude},{longitude}][%d] outletsGetOutletsByGeolocationOK  %+v", 200, o.Payload)
}

func (o *OutletsGetOutletsByGeolocationOK) GetPayload() *models.V3OutletGeolocationResponse {
	return o.Payload
}

func (o *OutletsGetOutletsByGeolocationOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.V3OutletGeolocationResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewOutletsGetOutletsByGeolocationBadRequest creates a OutletsGetOutletsByGeolocationBadRequest with default headers values
func NewOutletsGetOutletsByGeolocationBadRequest() *OutletsGetOutletsByGeolocationBadRequest {
	return &OutletsGetOutletsByGeolocationBadRequest{}
}

/*OutletsGetOutletsByGeolocationBadRequest handles this case with default header values.

Invalid Request
*/
type OutletsGetOutletsByGeolocationBadRequest struct {
	Payload *models.V3ErrorResponse
}

func (o *OutletsGetOutletsByGeolocationBadRequest) Error() string {
	return fmt.Sprintf("[GET /v3/outlets/location/{latitude},{longitude}][%d] outletsGetOutletsByGeolocationBadRequest  %+v", 400, o.Payload)
}

func (o *OutletsGetOutletsByGeolocationBadRequest) GetPayload() *models.V3ErrorResponse {
	return o.Payload
}

func (o *OutletsGetOutletsByGeolocationBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.V3ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewOutletsGetOutletsByGeolocationForbidden creates a OutletsGetOutletsByGeolocationForbidden with default headers values
func NewOutletsGetOutletsByGeolocationForbidden() *OutletsGetOutletsByGeolocationForbidden {
	return &OutletsGetOutletsByGeolocationForbidden{}
}

/*OutletsGetOutletsByGeolocationForbidden handles this case with default header values.

Access Denied
*/
type OutletsGetOutletsByGeolocationForbidden struct {
	Payload *models.V3ErrorResponse
}

func (o *OutletsGetOutletsByGeolocationForbidden) Error() string {
	return fmt.Sprintf("[GET /v3/outlets/location/{latitude},{longitude}][%d] outletsGetOutletsByGeolocationForbidden  %+v", 403, o.Payload)
}

func (o *OutletsGetOutletsByGeolocationForbidden) GetPayload() *models.V3ErrorResponse {
	return o.Payload
}

func (o *OutletsGetOutletsByGeolocationForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.V3ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
