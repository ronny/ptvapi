// Code generated by go-swagger; DO NOT EDIT.

package outlets

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"
)

// NewOutletsGetOutletsByGeolocationParams creates a new OutletsGetOutletsByGeolocationParams object
// with the default values initialized.
func NewOutletsGetOutletsByGeolocationParams() *OutletsGetOutletsByGeolocationParams {
	var ()
	return &OutletsGetOutletsByGeolocationParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewOutletsGetOutletsByGeolocationParamsWithTimeout creates a new OutletsGetOutletsByGeolocationParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewOutletsGetOutletsByGeolocationParamsWithTimeout(timeout time.Duration) *OutletsGetOutletsByGeolocationParams {
	var ()
	return &OutletsGetOutletsByGeolocationParams{

		timeout: timeout,
	}
}

// NewOutletsGetOutletsByGeolocationParamsWithContext creates a new OutletsGetOutletsByGeolocationParams object
// with the default values initialized, and the ability to set a context for a request
func NewOutletsGetOutletsByGeolocationParamsWithContext(ctx context.Context) *OutletsGetOutletsByGeolocationParams {
	var ()
	return &OutletsGetOutletsByGeolocationParams{

		Context: ctx,
	}
}

// NewOutletsGetOutletsByGeolocationParamsWithHTTPClient creates a new OutletsGetOutletsByGeolocationParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewOutletsGetOutletsByGeolocationParamsWithHTTPClient(client *http.Client) *OutletsGetOutletsByGeolocationParams {
	var ()
	return &OutletsGetOutletsByGeolocationParams{
		HTTPClient: client,
	}
}

/*OutletsGetOutletsByGeolocationParams contains all the parameters to send to the API endpoint
for the outlets get outlets by geolocation operation typically these are written to a http.Request
*/
type OutletsGetOutletsByGeolocationParams struct {

	/*Devid
	  Your developer id

	*/
	Devid *string
	/*Latitude
	  Geographic coordinate of latitude

	*/
	Latitude float32
	/*Longitude
	  Geographic coordinate of longitude

	*/
	Longitude float32
	/*MaxDistance
	  Filter by maximum distance (in metres) from location specified via latitude and longitude parameters (default = 300)

	*/
	MaxDistance *float64
	/*MaxResults
	  Maximum number of results returned (default = 30)

	*/
	MaxResults *int32
	/*Signature
	  Authentication signature for request

	*/
	Signature *string
	/*Token
	  Please ignore

	*/
	Token *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the outlets get outlets by geolocation params
func (o *OutletsGetOutletsByGeolocationParams) WithTimeout(timeout time.Duration) *OutletsGetOutletsByGeolocationParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the outlets get outlets by geolocation params
func (o *OutletsGetOutletsByGeolocationParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the outlets get outlets by geolocation params
func (o *OutletsGetOutletsByGeolocationParams) WithContext(ctx context.Context) *OutletsGetOutletsByGeolocationParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the outlets get outlets by geolocation params
func (o *OutletsGetOutletsByGeolocationParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the outlets get outlets by geolocation params
func (o *OutletsGetOutletsByGeolocationParams) WithHTTPClient(client *http.Client) *OutletsGetOutletsByGeolocationParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the outlets get outlets by geolocation params
func (o *OutletsGetOutletsByGeolocationParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithDevid adds the devid to the outlets get outlets by geolocation params
func (o *OutletsGetOutletsByGeolocationParams) WithDevid(devid *string) *OutletsGetOutletsByGeolocationParams {
	o.SetDevid(devid)
	return o
}

// SetDevid adds the devid to the outlets get outlets by geolocation params
func (o *OutletsGetOutletsByGeolocationParams) SetDevid(devid *string) {
	o.Devid = devid
}

// WithLatitude adds the latitude to the outlets get outlets by geolocation params
func (o *OutletsGetOutletsByGeolocationParams) WithLatitude(latitude float32) *OutletsGetOutletsByGeolocationParams {
	o.SetLatitude(latitude)
	return o
}

// SetLatitude adds the latitude to the outlets get outlets by geolocation params
func (o *OutletsGetOutletsByGeolocationParams) SetLatitude(latitude float32) {
	o.Latitude = latitude
}

// WithLongitude adds the longitude to the outlets get outlets by geolocation params
func (o *OutletsGetOutletsByGeolocationParams) WithLongitude(longitude float32) *OutletsGetOutletsByGeolocationParams {
	o.SetLongitude(longitude)
	return o
}

// SetLongitude adds the longitude to the outlets get outlets by geolocation params
func (o *OutletsGetOutletsByGeolocationParams) SetLongitude(longitude float32) {
	o.Longitude = longitude
}

// WithMaxDistance adds the maxDistance to the outlets get outlets by geolocation params
func (o *OutletsGetOutletsByGeolocationParams) WithMaxDistance(maxDistance *float64) *OutletsGetOutletsByGeolocationParams {
	o.SetMaxDistance(maxDistance)
	return o
}

// SetMaxDistance adds the maxDistance to the outlets get outlets by geolocation params
func (o *OutletsGetOutletsByGeolocationParams) SetMaxDistance(maxDistance *float64) {
	o.MaxDistance = maxDistance
}

// WithMaxResults adds the maxResults to the outlets get outlets by geolocation params
func (o *OutletsGetOutletsByGeolocationParams) WithMaxResults(maxResults *int32) *OutletsGetOutletsByGeolocationParams {
	o.SetMaxResults(maxResults)
	return o
}

// SetMaxResults adds the maxResults to the outlets get outlets by geolocation params
func (o *OutletsGetOutletsByGeolocationParams) SetMaxResults(maxResults *int32) {
	o.MaxResults = maxResults
}

// WithSignature adds the signature to the outlets get outlets by geolocation params
func (o *OutletsGetOutletsByGeolocationParams) WithSignature(signature *string) *OutletsGetOutletsByGeolocationParams {
	o.SetSignature(signature)
	return o
}

// SetSignature adds the signature to the outlets get outlets by geolocation params
func (o *OutletsGetOutletsByGeolocationParams) SetSignature(signature *string) {
	o.Signature = signature
}

// WithToken adds the token to the outlets get outlets by geolocation params
func (o *OutletsGetOutletsByGeolocationParams) WithToken(token *string) *OutletsGetOutletsByGeolocationParams {
	o.SetToken(token)
	return o
}

// SetToken adds the token to the outlets get outlets by geolocation params
func (o *OutletsGetOutletsByGeolocationParams) SetToken(token *string) {
	o.Token = token
}

// WriteToRequest writes these params to a swagger request
func (o *OutletsGetOutletsByGeolocationParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Devid != nil {

		// query param devid
		var qrDevid string
		if o.Devid != nil {
			qrDevid = *o.Devid
		}
		qDevid := qrDevid
		if qDevid != "" {
			if err := r.SetQueryParam("devid", qDevid); err != nil {
				return err
			}
		}

	}

	// path param latitude
	if err := r.SetPathParam("latitude", swag.FormatFloat32(o.Latitude)); err != nil {
		return err
	}

	// path param longitude
	if err := r.SetPathParam("longitude", swag.FormatFloat32(o.Longitude)); err != nil {
		return err
	}

	if o.MaxDistance != nil {

		// query param max_distance
		var qrMaxDistance float64
		if o.MaxDistance != nil {
			qrMaxDistance = *o.MaxDistance
		}
		qMaxDistance := swag.FormatFloat64(qrMaxDistance)
		if qMaxDistance != "" {
			if err := r.SetQueryParam("max_distance", qMaxDistance); err != nil {
				return err
			}
		}

	}

	if o.MaxResults != nil {

		// query param max_results
		var qrMaxResults int32
		if o.MaxResults != nil {
			qrMaxResults = *o.MaxResults
		}
		qMaxResults := swag.FormatInt32(qrMaxResults)
		if qMaxResults != "" {
			if err := r.SetQueryParam("max_results", qMaxResults); err != nil {
				return err
			}
		}

	}

	if o.Signature != nil {

		// query param signature
		var qrSignature string
		if o.Signature != nil {
			qrSignature = *o.Signature
		}
		qSignature := qrSignature
		if qSignature != "" {
			if err := r.SetQueryParam("signature", qSignature); err != nil {
				return err
			}
		}

	}

	if o.Token != nil {

		// query param token
		var qrToken string
		if o.Token != nil {
			qrToken = *o.Token
		}
		qToken := qrToken
		if qToken != "" {
			if err := r.SetQueryParam("token", qToken); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
