// Code generated by go-swagger; DO NOT EDIT.

package outlets

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"
)

// NewOutletsGetAllOutletsParams creates a new OutletsGetAllOutletsParams object
// with the default values initialized.
func NewOutletsGetAllOutletsParams() *OutletsGetAllOutletsParams {
	var ()
	return &OutletsGetAllOutletsParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewOutletsGetAllOutletsParamsWithTimeout creates a new OutletsGetAllOutletsParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewOutletsGetAllOutletsParamsWithTimeout(timeout time.Duration) *OutletsGetAllOutletsParams {
	var ()
	return &OutletsGetAllOutletsParams{

		timeout: timeout,
	}
}

// NewOutletsGetAllOutletsParamsWithContext creates a new OutletsGetAllOutletsParams object
// with the default values initialized, and the ability to set a context for a request
func NewOutletsGetAllOutletsParamsWithContext(ctx context.Context) *OutletsGetAllOutletsParams {
	var ()
	return &OutletsGetAllOutletsParams{

		Context: ctx,
	}
}

// NewOutletsGetAllOutletsParamsWithHTTPClient creates a new OutletsGetAllOutletsParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewOutletsGetAllOutletsParamsWithHTTPClient(client *http.Client) *OutletsGetAllOutletsParams {
	var ()
	return &OutletsGetAllOutletsParams{
		HTTPClient: client,
	}
}

/*OutletsGetAllOutletsParams contains all the parameters to send to the API endpoint
for the outlets get all outlets operation typically these are written to a http.Request
*/
type OutletsGetAllOutletsParams struct {

	/*Devid
	  Your developer id

	*/
	Devid *string
	/*MaxResults
	  Maximum number of results returned (default = 30)

	*/
	MaxResults *int32
	/*Signature
	  Authentication signature for request

	*/
	Signature *string
	/*Token
	  Please ignore

	*/
	Token *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the outlets get all outlets params
func (o *OutletsGetAllOutletsParams) WithTimeout(timeout time.Duration) *OutletsGetAllOutletsParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the outlets get all outlets params
func (o *OutletsGetAllOutletsParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the outlets get all outlets params
func (o *OutletsGetAllOutletsParams) WithContext(ctx context.Context) *OutletsGetAllOutletsParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the outlets get all outlets params
func (o *OutletsGetAllOutletsParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the outlets get all outlets params
func (o *OutletsGetAllOutletsParams) WithHTTPClient(client *http.Client) *OutletsGetAllOutletsParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the outlets get all outlets params
func (o *OutletsGetAllOutletsParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithDevid adds the devid to the outlets get all outlets params
func (o *OutletsGetAllOutletsParams) WithDevid(devid *string) *OutletsGetAllOutletsParams {
	o.SetDevid(devid)
	return o
}

// SetDevid adds the devid to the outlets get all outlets params
func (o *OutletsGetAllOutletsParams) SetDevid(devid *string) {
	o.Devid = devid
}

// WithMaxResults adds the maxResults to the outlets get all outlets params
func (o *OutletsGetAllOutletsParams) WithMaxResults(maxResults *int32) *OutletsGetAllOutletsParams {
	o.SetMaxResults(maxResults)
	return o
}

// SetMaxResults adds the maxResults to the outlets get all outlets params
func (o *OutletsGetAllOutletsParams) SetMaxResults(maxResults *int32) {
	o.MaxResults = maxResults
}

// WithSignature adds the signature to the outlets get all outlets params
func (o *OutletsGetAllOutletsParams) WithSignature(signature *string) *OutletsGetAllOutletsParams {
	o.SetSignature(signature)
	return o
}

// SetSignature adds the signature to the outlets get all outlets params
func (o *OutletsGetAllOutletsParams) SetSignature(signature *string) {
	o.Signature = signature
}

// WithToken adds the token to the outlets get all outlets params
func (o *OutletsGetAllOutletsParams) WithToken(token *string) *OutletsGetAllOutletsParams {
	o.SetToken(token)
	return o
}

// SetToken adds the token to the outlets get all outlets params
func (o *OutletsGetAllOutletsParams) SetToken(token *string) {
	o.Token = token
}

// WriteToRequest writes these params to a swagger request
func (o *OutletsGetAllOutletsParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Devid != nil {

		// query param devid
		var qrDevid string
		if o.Devid != nil {
			qrDevid = *o.Devid
		}
		qDevid := qrDevid
		if qDevid != "" {
			if err := r.SetQueryParam("devid", qDevid); err != nil {
				return err
			}
		}

	}

	if o.MaxResults != nil {

		// query param max_results
		var qrMaxResults int32
		if o.MaxResults != nil {
			qrMaxResults = *o.MaxResults
		}
		qMaxResults := swag.FormatInt32(qrMaxResults)
		if qMaxResults != "" {
			if err := r.SetQueryParam("max_results", qMaxResults); err != nil {
				return err
			}
		}

	}

	if o.Signature != nil {

		// query param signature
		var qrSignature string
		if o.Signature != nil {
			qrSignature = *o.Signature
		}
		qSignature := qrSignature
		if qSignature != "" {
			if err := r.SetQueryParam("signature", qSignature); err != nil {
				return err
			}
		}

	}

	if o.Token != nil {

		// query param token
		var qrToken string
		if o.Token != nil {
			qrToken = *o.Token
		}
		qToken := qrToken
		if qToken != "" {
			if err := r.SetQueryParam("token", qToken); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
