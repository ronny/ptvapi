// Code generated by go-swagger; DO NOT EDIT.

package runs

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new runs API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for runs API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
RunsForRoute views all trip service runs for a specific route ID
*/
func (a *Client) RunsForRoute(params *RunsForRouteParams) (*RunsForRouteOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRunsForRouteParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Runs_ForRoute",
		Method:             "GET",
		PathPattern:        "/v3/runs/route/{route_id}",
		ProducesMediaTypes: []string{"application/json", "text/html", "text/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &RunsForRouteReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*RunsForRouteOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Runs_ForRoute: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
RunsForRouteAndRouteType views all trip service runs for a specific route ID and route type
*/
func (a *Client) RunsForRouteAndRouteType(params *RunsForRouteAndRouteTypeParams) (*RunsForRouteAndRouteTypeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRunsForRouteAndRouteTypeParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Runs_ForRouteAndRouteType",
		Method:             "GET",
		PathPattern:        "/v3/runs/route/{route_id}/route_type/{route_type}",
		ProducesMediaTypes: []string{"application/json", "text/html", "text/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &RunsForRouteAndRouteTypeReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*RunsForRouteAndRouteTypeOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Runs_ForRouteAndRouteType: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
RunsForRun views all trip service runs for a specific run ID
*/
func (a *Client) RunsForRun(params *RunsForRunParams) (*RunsForRunOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRunsForRunParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Runs_ForRun",
		Method:             "GET",
		PathPattern:        "/v3/runs/{run_id}",
		ProducesMediaTypes: []string{"application/json", "text/html", "text/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &RunsForRunReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*RunsForRunOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Runs_ForRun: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
RunsForRunAndRouteType views the trip service run for a specific run ID and route type
*/
func (a *Client) RunsForRunAndRouteType(params *RunsForRunAndRouteTypeParams) (*RunsForRunAndRouteTypeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRunsForRunAndRouteTypeParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Runs_ForRunAndRouteType",
		Method:             "GET",
		PathPattern:        "/v3/runs/{run_id}/route_type/{route_type}",
		ProducesMediaTypes: []string{"application/json", "text/html", "text/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &RunsForRunAndRouteTypeReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*RunsForRunAndRouteTypeOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Runs_ForRunAndRouteType: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
